
@mixin font-face($font-family, $file-path, $file-name, $type: 'ttf', $weight: normal, $style: normal, $asset-pipeline: false ) {
    @font-face {
        font-family: $font-family;
        font-weight: $weight;
        font-style: $style;
        @if $type == 'ttf' {
            src: url('#{$file-path}/#{$file-name}.ttf')      format('truetype')
        }
        @if $type == 'eot' {
            src: url('#{$file-path}/#{$file-name}.eot?#iefix')  format('embedded-opentype')
        }
        @if $type == 'woff' {
            src: url('#{$file-path}/#{$file-name}.woff')     format('woff')
        }
        @if $type == 'svg' {
            src: url('#{$file-path}/#{$file-name}.svg##{$font-family}')      format('svg');
        }
    }
}
// FUTION NTO CONVERT PX TO REM
@function toRem($value) {
    @if(unitless($value)){
        $remValue: ($value / 16) + rem;
        @return $remValue;
    } @else {
        @return $value;
    }
}

//   Font sieze
@mixin typography($font-size, $color, $family, $line-height: normal, $letter-spacing: normal) {
	font-family: $family;
    font-size: toRem($font-size);
    @if $line-height==normal {
        line-height: normal;
    } @else {
        line-height: toRem($line-height) / toRem($font-size);
    }

    @if $letter-spacing==normal {
        letter-spacing: normal;
    } @else {
        letter-spacing: #{$letter-spacing / $font-size}em;
    }
	color: $color;
}

@mixin hyperlink($family, $size){
    @if $family == bold{
        font-family: 'Roboto-Bold';
    } @else{
        font-family: 'Roboto-Regular';
    }

    @if $size == 16{
        font-size: toRem(16);
    } @else{
        font-size: toRem(14);
    }
}

@mixin inputfocus($focusBorder){
	border: 1px solid $focusBorder;
}

@mixin button-settings($fontSize, $family, $textColor: #fff, $mrgTopBottom:null, $mrgLeftRight:null, $bord-radius:null){
	font-size: toRem($fontSize);
	font-family:  $family;
    color: $textColor;
    margin: toRem($mrgTopBottom) toRem($mrgLeftRight);
	text-align: center;
    text-transform: capitalize;
	border: none;
	border-radius: toRem($bord-radius);
	position: relative;
	z-index: 1;
    display: inline-block;
    cursor: pointer;
    box-shadow: none;
    &:focus{
        outline: none;
    }
}

@mixin button-size ($width, $hight){
    width: toRem($width);
    height: toRem($hight);
}

@mixin button-bkg($bg, $textColor:null, $border-size:null, $border-color: null) {
    background: $bg;
    color: $textColor;
    border: $border-size solid $border-color;
    // &:hover {
    //     background-color: $bg;
    //     color: $tc;
    // }
}

@mixin border-radius ($bord-radius:null){
    border-radius: $bord-radius;
}

// @mixin border-radius ($bord-radius:null){
//     @if $bord-radius == 4{
//         border-radius: 4px;
//     }
//     @else if $bord-radius == 3{
//         border-radius: 0 4px 4px 0;
//     }
//     @else if $bord-radius == 2{
//         border-radius: 4px 0 0 4px;
//     }
//     @else if $bord-radius == 0{
//         border-radius: 0;
//     }
// }

// @mixin iconSettings($_width, $_height){
// 	content: "";
//         background-repeat: no-repeat;
//         background-size: 24px 24px;
//         width: $_width;
//         height: $_height;
//         display: inline-block;
//         vertical-align: middle;
//         margin: 4px;
//         cursor: pointer;
// }

// @mixin iconContainer {
// 	height: 40px;
// 	width: 40px;
// 	margin: 4px !important;
// 	cursor: pointer;
// 	display: flex;
//     justify-content: center;
//     align-items: center;
// }


// You can pass width && height
/* or just pass width and the height
   will default to the width value */
@mixin box($width, $height: auto) {
    width: toRem($width);
    height: toRem($height);
}

// Flexbox mixin
@mixin flex-column {
    display: flex;
    flex-direction: column;
}

@mixin flex-row {
    display: flex;
    flex-direction: row;
}

@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin flex-start-center {
    display: flex;
    align-items: center;
    justify-content: flex-start;
}

@mixin flex-space-between-end {
    display: flex;
    align-items: flex-end;
    justify-content: space-between;
}

@mixin flex-center-column {
    @include flex-center;
    flex-direction: column;
}

@mixin flex-center-vert {
    display: flex;
    align-items: center;
}

@mixin flex-center-horiz {
    display: flex;
    justify-content: center;
}

@mixin flex-start-center-row {
    @include flex-start-center;
    flex-direction: row;
}

@mixin edit-icon-table-right($height){
    display: flex;
    justify-content: flex-end;
    align-items: center;
    height: toRem($height);
}


//   Positioning
@mixin position($position, $args) {
    @each $o in top right bottom left {
        $i: index($args, $o);
        @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
            #{$o}: nth($args, $i + 1);
        }
    }
    position: $position;
}

@mixin absolute($args: '') {
    @include position(absolute, $args);
}

@mixin fixed($args: '') {
    @include position(fixed, $args);
}

@mixin relative($args: '') {
    @include position(relative, $args);
}
// USAGE
//   .menu li {
//     @include relative;
//   }

//   .sub-menu {
//     @include absolute(top 100% left 0);
//   }

//   .sticky-bar {
//     @include fixed(top 0 left 0);
//   }


@mixin input-settings() {
    @include typography(14, $second-black, Roboto-Regular);
    padding: 5px 15px;
    margin: 4px 0;
    border: 1px solid $first-grey;
    caret-color: $primary-blue;
    border-radius: 10px;
    background: $pure-white;
    filter: none;
    &:focus,
    &:hover {
        outline: none;
        border: 1px solid $primary-blue;
    }
    &::placeholder{
        color: $second-grey;
    }
}

@mixin input-size ($width:null, $hight:null){
    width: toRem($width);
    height: toRem($hight);
}

@mixin input-status($bkg-color:null, $bord-color:null, $car-color:null, $cursor:null) {
    background-color: $bkg-color;
    border-color: $bord-color;
    caret-color: $car-color;
    cursor: $cursor;
}

@mixin centerSelf() {
    @include absolute(top 50% left 50%);
    transform: translate(-50%, -50%);
}


@mixin grid($grid-type, $args, $row-gap, $column-gap: $row-gap) {
    @supports (display: grid) {
      display: grid;
      #{$grid-type}: #{$args};
      grid-gap: rem($row-gap) rem($column-gap);
    }
}

// Example usage is as follows:

// @include grid('grid-template-rows', '1fr 2fr', 10px, 20px);

// @include grid('grid-template-columns, 'repeat(3, auto)', 10px, 15px);


// Fonction to creat classes for pull and push elements
@for $i from 1 through 200 {
    $padding-top: $i * 1px;

    .pt-#{$i} {
        padding-top: toRem($padding-top) !important;
    }
}
@for $i from 1 through 200 {
    $padding-bottom: $i * 1px;

    .pb-#{$i} {
        padding-bottom: toRem($padding-bottom) !important;
    }
}
@for $i from 1 through 200 {
    $padding-left: $i * 1px;

    .pl-#{$i} {
        padding-left: toRem($padding-left) !important;
    }
}
@for $i from 1 through 200 {
    $padding-right: $i * 1px;

    .pr-#{$i} {
        padding-right: toRem($padding-right) !important;
    }
}

@for $i from 1 through 200 {
    $margin-bottom: $i * 1px;

    .mb-#{$i} {
        margin-bottom: toRem($margin-bottom ) !important;
    }
}

@for $i from 1 through 200 {
    $margin-top: $i * 1px;

    .mt-#{$i} {
        margin-top: toRem($margin-top) !important;
    }
}

@for $i from 1 through 200 {
    $margin-left: $i * 1px;

    .ml-#{$i} {
        margin-left: toRem($margin-left) !important;
    }
}

@for $i from 1 through 200 {
    $margin-right: $i * 1px;

    .mr-#{$i} {
        margin-right: toRem($margin-right) !important;
    }
}


@mixin radio-check-icon-settings{
    content: "";
    display: inline-block;
    background-size: 100%;
    background-repeat: no-repeat;
    background-color: transparent;
    position: absolute;
    top: -5px;
    left: -15px;
    cursor: pointer;
    font-size: 0;
    outline: none;
    border:none;
    width: 30px;
    height: 30px;
}

@mixin radio-check-icon-settings-custom($width, $height, $top) {
    content: "";
    display: inline-block;
    background-size: 100%;
    background-repeat: no-repeat;
    background-color: transparent;
    position: absolute;
    top: $top;
    left: -20px;
    cursor: pointer;
    font-size: 0;
    outline: none;
    border:none;
    width: $width;
    height: $height;
}

@mixin input-radio-check-settings{
    position: relative;
    opacity: 0;
    z-index: 1;
    top: 0px;
    left: -10px;
    cursor: pointer;
    color: $second-black;
}

@mixin toggleSettings($tgl_color){
    background: $tgl_color;
    border-radius: 2em;
    padding: 2px;
    transition: all .4s ease;

    &:after {
        border-radius: 50%;
        background: $pure-white;
        transition: all .5s ease;
    }
}
